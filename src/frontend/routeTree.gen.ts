/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LoginImport } from './routes/login'
import { Route as UnauthenticatedImport } from './routes/_unauthenticated'
import { Route as AuthenticatedImport } from './routes/_authenticated'
import { Route as AuthenticatedSettingsRouteImport } from './routes/_authenticated/settings/route'
import { Route as AuthenticatedNotesRouteImport } from './routes/_authenticated/notes/route'
import { Route as AuthenticatedDashboardRouteImport } from './routes/_authenticated/dashboard/route'
import { Route as AuthenticatedNotesNewImport } from './routes/_authenticated/notes/new'
import { Route as AuthenticatedNotesNoteIdImport } from './routes/_authenticated/notes/$noteId'

// Create Virtual Routes

const UnauthenticatedIndexLazyImport = createFileRoute('/_unauthenticated/')()
const UnauthenticatedContactLazyImport = createFileRoute(
  '/_unauthenticated/contact',
)()

// Create/Update Routes

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const UnauthenticatedRoute = UnauthenticatedImport.update({
  id: '/_unauthenticated',
  getParentRoute: () => rootRoute,
} as any)

const AuthenticatedRoute = AuthenticatedImport.update({
  id: '/_authenticated',
  getParentRoute: () => rootRoute,
} as any)

const UnauthenticatedIndexLazyRoute = UnauthenticatedIndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => UnauthenticatedRoute,
} as any).lazy(() =>
  import('./routes/_unauthenticated/index.lazy').then((d) => d.Route),
)

const UnauthenticatedContactLazyRoute = UnauthenticatedContactLazyImport.update(
  {
    id: '/contact',
    path: '/contact',
    getParentRoute: () => UnauthenticatedRoute,
  } as any,
).lazy(() =>
  import('./routes/_unauthenticated/contact.lazy').then((d) => d.Route),
)

const AuthenticatedSettingsRouteRoute = AuthenticatedSettingsRouteImport.update(
  {
    id: '/settings',
    path: '/settings',
    getParentRoute: () => AuthenticatedRoute,
  } as any,
).lazy(() =>
  import('./routes/_authenticated/settings/route.lazy').then((d) => d.Route),
)

const AuthenticatedNotesRouteRoute = AuthenticatedNotesRouteImport.update({
  id: '/notes',
  path: '/notes',
  getParentRoute: () => AuthenticatedRoute,
} as any).lazy(() =>
  import('./routes/_authenticated/notes/route.lazy').then((d) => d.Route),
)

const AuthenticatedDashboardRouteRoute =
  AuthenticatedDashboardRouteImport.update({
    id: '/dashboard',
    path: '/dashboard',
    getParentRoute: () => AuthenticatedRoute,
  } as any).lazy(() =>
    import('./routes/_authenticated/dashboard/route.lazy').then((d) => d.Route),
  )

const AuthenticatedNotesNewRoute = AuthenticatedNotesNewImport.update({
  id: '/new',
  path: '/new',
  getParentRoute: () => AuthenticatedNotesRouteRoute,
} as any).lazy(() =>
  import('./routes/_authenticated/notes/new.lazy').then((d) => d.Route),
)

const AuthenticatedNotesNoteIdRoute = AuthenticatedNotesNoteIdImport.update({
  id: '/$noteId',
  path: '/$noteId',
  getParentRoute: () => AuthenticatedNotesRouteRoute,
} as any).lazy(() =>
  import('./routes/_authenticated/notes/$noteId.lazy').then((d) => d.Route),
)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_authenticated': {
      id: '/_authenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedImport
      parentRoute: typeof rootRoute
    }
    '/_unauthenticated': {
      id: '/_unauthenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof UnauthenticatedImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/_authenticated/dashboard': {
      id: '/_authenticated/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof AuthenticatedDashboardRouteImport
      parentRoute: typeof AuthenticatedImport
    }
    '/_authenticated/notes': {
      id: '/_authenticated/notes'
      path: '/notes'
      fullPath: '/notes'
      preLoaderRoute: typeof AuthenticatedNotesRouteImport
      parentRoute: typeof AuthenticatedImport
    }
    '/_authenticated/settings': {
      id: '/_authenticated/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof AuthenticatedSettingsRouteImport
      parentRoute: typeof AuthenticatedImport
    }
    '/_unauthenticated/contact': {
      id: '/_unauthenticated/contact'
      path: '/contact'
      fullPath: '/contact'
      preLoaderRoute: typeof UnauthenticatedContactLazyImport
      parentRoute: typeof UnauthenticatedImport
    }
    '/_unauthenticated/': {
      id: '/_unauthenticated/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof UnauthenticatedIndexLazyImport
      parentRoute: typeof UnauthenticatedImport
    }
    '/_authenticated/notes/$noteId': {
      id: '/_authenticated/notes/$noteId'
      path: '/$noteId'
      fullPath: '/notes/$noteId'
      preLoaderRoute: typeof AuthenticatedNotesNoteIdImport
      parentRoute: typeof AuthenticatedNotesRouteImport
    }
    '/_authenticated/notes/new': {
      id: '/_authenticated/notes/new'
      path: '/new'
      fullPath: '/notes/new'
      preLoaderRoute: typeof AuthenticatedNotesNewImport
      parentRoute: typeof AuthenticatedNotesRouteImport
    }
  }
}

// Create and export the route tree

interface AuthenticatedNotesRouteRouteChildren {
  AuthenticatedNotesNoteIdRoute: typeof AuthenticatedNotesNoteIdRoute
  AuthenticatedNotesNewRoute: typeof AuthenticatedNotesNewRoute
}

const AuthenticatedNotesRouteRouteChildren: AuthenticatedNotesRouteRouteChildren =
  {
    AuthenticatedNotesNoteIdRoute: AuthenticatedNotesNoteIdRoute,
    AuthenticatedNotesNewRoute: AuthenticatedNotesNewRoute,
  }

const AuthenticatedNotesRouteRouteWithChildren =
  AuthenticatedNotesRouteRoute._addFileChildren(
    AuthenticatedNotesRouteRouteChildren,
  )

interface AuthenticatedRouteChildren {
  AuthenticatedDashboardRouteRoute: typeof AuthenticatedDashboardRouteRoute
  AuthenticatedNotesRouteRoute: typeof AuthenticatedNotesRouteRouteWithChildren
  AuthenticatedSettingsRouteRoute: typeof AuthenticatedSettingsRouteRoute
}

const AuthenticatedRouteChildren: AuthenticatedRouteChildren = {
  AuthenticatedDashboardRouteRoute: AuthenticatedDashboardRouteRoute,
  AuthenticatedNotesRouteRoute: AuthenticatedNotesRouteRouteWithChildren,
  AuthenticatedSettingsRouteRoute: AuthenticatedSettingsRouteRoute,
}

const AuthenticatedRouteWithChildren = AuthenticatedRoute._addFileChildren(
  AuthenticatedRouteChildren,
)

interface UnauthenticatedRouteChildren {
  UnauthenticatedContactLazyRoute: typeof UnauthenticatedContactLazyRoute
  UnauthenticatedIndexLazyRoute: typeof UnauthenticatedIndexLazyRoute
}

const UnauthenticatedRouteChildren: UnauthenticatedRouteChildren = {
  UnauthenticatedContactLazyRoute: UnauthenticatedContactLazyRoute,
  UnauthenticatedIndexLazyRoute: UnauthenticatedIndexLazyRoute,
}

const UnauthenticatedRouteWithChildren = UnauthenticatedRoute._addFileChildren(
  UnauthenticatedRouteChildren,
)

export interface FileRoutesByFullPath {
  '': typeof UnauthenticatedRouteWithChildren
  '/login': typeof LoginRoute
  '/dashboard': typeof AuthenticatedDashboardRouteRoute
  '/notes': typeof AuthenticatedNotesRouteRouteWithChildren
  '/settings': typeof AuthenticatedSettingsRouteRoute
  '/contact': typeof UnauthenticatedContactLazyRoute
  '/': typeof UnauthenticatedIndexLazyRoute
  '/notes/$noteId': typeof AuthenticatedNotesNoteIdRoute
  '/notes/new': typeof AuthenticatedNotesNewRoute
}

export interface FileRoutesByTo {
  '': typeof AuthenticatedRouteWithChildren
  '/login': typeof LoginRoute
  '/dashboard': typeof AuthenticatedDashboardRouteRoute
  '/notes': typeof AuthenticatedNotesRouteRouteWithChildren
  '/settings': typeof AuthenticatedSettingsRouteRoute
  '/contact': typeof UnauthenticatedContactLazyRoute
  '/': typeof UnauthenticatedIndexLazyRoute
  '/notes/$noteId': typeof AuthenticatedNotesNoteIdRoute
  '/notes/new': typeof AuthenticatedNotesNewRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_authenticated': typeof AuthenticatedRouteWithChildren
  '/_unauthenticated': typeof UnauthenticatedRouteWithChildren
  '/login': typeof LoginRoute
  '/_authenticated/dashboard': typeof AuthenticatedDashboardRouteRoute
  '/_authenticated/notes': typeof AuthenticatedNotesRouteRouteWithChildren
  '/_authenticated/settings': typeof AuthenticatedSettingsRouteRoute
  '/_unauthenticated/contact': typeof UnauthenticatedContactLazyRoute
  '/_unauthenticated/': typeof UnauthenticatedIndexLazyRoute
  '/_authenticated/notes/$noteId': typeof AuthenticatedNotesNoteIdRoute
  '/_authenticated/notes/new': typeof AuthenticatedNotesNewRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | ''
    | '/login'
    | '/dashboard'
    | '/notes'
    | '/settings'
    | '/contact'
    | '/'
    | '/notes/$noteId'
    | '/notes/new'
  fileRoutesByTo: FileRoutesByTo
  to:
    | ''
    | '/login'
    | '/dashboard'
    | '/notes'
    | '/settings'
    | '/contact'
    | '/'
    | '/notes/$noteId'
    | '/notes/new'
  id:
    | '__root__'
    | '/_authenticated'
    | '/_unauthenticated'
    | '/login'
    | '/_authenticated/dashboard'
    | '/_authenticated/notes'
    | '/_authenticated/settings'
    | '/_unauthenticated/contact'
    | '/_unauthenticated/'
    | '/_authenticated/notes/$noteId'
    | '/_authenticated/notes/new'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  AuthenticatedRoute: typeof AuthenticatedRouteWithChildren
  UnauthenticatedRoute: typeof UnauthenticatedRouteWithChildren
  LoginRoute: typeof LoginRoute
}

const rootRouteChildren: RootRouteChildren = {
  AuthenticatedRoute: AuthenticatedRouteWithChildren,
  UnauthenticatedRoute: UnauthenticatedRouteWithChildren,
  LoginRoute: LoginRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_authenticated",
        "/_unauthenticated",
        "/login"
      ]
    },
    "/_authenticated": {
      "filePath": "_authenticated.tsx",
      "children": [
        "/_authenticated/dashboard",
        "/_authenticated/notes",
        "/_authenticated/settings"
      ]
    },
    "/_unauthenticated": {
      "filePath": "_unauthenticated.tsx",
      "children": [
        "/_unauthenticated/contact",
        "/_unauthenticated/"
      ]
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/_authenticated/dashboard": {
      "filePath": "_authenticated/dashboard/route.tsx",
      "parent": "/_authenticated"
    },
    "/_authenticated/notes": {
      "filePath": "_authenticated/notes/route.tsx",
      "parent": "/_authenticated",
      "children": [
        "/_authenticated/notes/$noteId",
        "/_authenticated/notes/new"
      ]
    },
    "/_authenticated/settings": {
      "filePath": "_authenticated/settings/route.tsx",
      "parent": "/_authenticated"
    },
    "/_unauthenticated/contact": {
      "filePath": "_unauthenticated/contact.lazy.tsx",
      "parent": "/_unauthenticated"
    },
    "/_unauthenticated/": {
      "filePath": "_unauthenticated/index.lazy.tsx",
      "parent": "/_unauthenticated"
    },
    "/_authenticated/notes/$noteId": {
      "filePath": "_authenticated/notes/$noteId.tsx",
      "parent": "/_authenticated/notes"
    },
    "/_authenticated/notes/new": {
      "filePath": "_authenticated/notes/new.tsx",
      "parent": "/_authenticated/notes"
    }
  }
}
ROUTE_MANIFEST_END */
